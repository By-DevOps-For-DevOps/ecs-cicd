AWSTemplateFormatVersion: "2010-09-09"

Description: >
  This template  builds an AWS CodePipeline pipeline that implements a continuous delivery release
  process for an app.

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Github configuration"
        Parameters:
          - GitHubRepo
          - GitHubBranch
          - GitHubToken
          - GitHubUser
      - Label:
          default: "S3 Bucket for Lambda Function"
        Parameters:
          - S3BucketName
      - Label:
          default: "EC2 Container Service"
        Parameters:
          - ECSRespositoryName
      - Label:
          default: "ECS Production Parameters"
        Parameters:
          - SourceECSAWSAccountId
          - SourceECSRegion
      - Label:
          default: "Release Details"
        Parameters:
          - ReleasePlan
          - DeployEnvironment
          - ReleaseManagerGitEmail
          - ReleaseManagerGitUsername
      - Label:
          default: "Notifications"
        Parameters:
          - SlackChannel
          - SlackWebHook
          - Email
Parameters:
  PipelineName:
    Description: A name for pipeline
    Type: String
  GitHubRepo:
    Type: String
    Description: Github repo name (e.g. github.com/Org/RepoName then RepoName)
  GitHubBranch:
    Type: String
    Default: 'master'
    Description: The github branch to monitor for changes.
  GitHubToken:
    Type: String
    Description: The Github Token which has access to the repository.
  GitHubUser:
    Type: String
    Description: The Github User/Organisation under which the repository is hosted.
  TagName:
    Type: String
    Description: Tag name for the cloudformation stack
  InfrastructureTagName:
    Type: String
    Description: Tag name specified for infrastructure cloudformation stack.
  ECSRespositoryName:
    Type: String
    Description: ECS Respository Name (If URI is xxx.dkr.ecr.us-east-1.amazonaws.com/nginx, then nginx)
  ReleasePlan:
    Type: String
    Description: (Staging Only) Release version (Eg. 1.0.0) Plan for this Staging Pipeline (This should be updated after each release)
  ReleaseManagerGitUsername:
    Type: String
    Description: (Staging Only)Github Username of the Release Manager
  ReleaseManagerGitEmail:
    Type: String
    Description: (Staging Only)Github Email of the Release Manager  
  SourceECSAWSAccountId:
    Type: String
    Description: (Production Only) AWS Account Id of the Staging ECS Cluster
  SourceECSRegion:
    Type: String
    Description: (Production Only) Region containing the Staging ECS Cluster
  S3BucketName:
    Default: S3_BUCKET_NAME
    Type: String
    Description: S3 Bucket which contains the Lambda function
  EnvVariablesS3BucketName:
    Type: String
    Description: S3 Bucket which contains App specific Environment variables
  EnvVariablesS3Key:
    Type: String
    Description: S3 file path which contains App specific Environment variables
  DeployEnvironment:
    Type: String
    Description: Specify the environment
    AllowedValues:
      - production
      - staging
      - hotfix
      - development
      - feature
    ConstraintDescription: Must specify production, staging, hotfix, development or feature.
  SlackChannel:
    Type: String
    Default: "#"
    Description: Slack channel to be notified. (start with '#')
  SlackWebHook:
    Type: String
    Description: Slack incoming webhook
  Email:
    Type: String
    Description: Email Notification for CloudWatch Alarms

Mappings:
  EnviormentTag:
    production:
      value: ""
      env: "Prod"
    staging:
      value: "candidate"
      env: "Staging"
    hotfix:
      value: "hotfix"
      env: "Dev"
    development:
      value: "snapshot"
      env: "Dev"
    feature:
      value: "feature"
      env: "Dev"

Conditions:
  IsProductionCondition: !Equals [ !Ref DeployEnvironment, production ]
  IsStagingCondition: !Equals [ !Ref DeployEnvironment, staging ]
  IsHotfixCondition: !Equals [ !Ref DeployEnvironment, hotfix ]
  IsDevelopmentCondition: !Equals [ !Ref DeployEnvironment, development ]
  IsFeatureCondition: !Equals [ !Ref DeployEnvironment, feature ]
  IsEnvVariablesS3BucketEmpty: !Equals [ !Ref EnvVariablesS3BucketName, '' ]

Resources:
  CloudFormationExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub cfn-${TagName}-${DeployEnvironment}
      Path: /
      AssumeRolePolicyDocument: |
        {
            "Statement": [{
                "Effect": "Allow",
                "Principal": { "Service": [ "cloudformation.amazonaws.com" ]},
                "Action": [ "sts:AssumeRole" ]
            }]
        }
      Policies:
        - PolicyName: CloudFormationRole
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource: "*"
                Effect: Allow
                Action: "*"

  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub cb-${TagName}-${DeployEnvironment}
      Path: /
      AssumeRolePolicyDocument:
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "codebuild.amazonaws.com"
            Action:
              - "sts:AssumeRole"
          -
            Effect: "Allow"
            Principal:
              AWS:
                - !If [IsProductionCondition, !Sub "arn:aws:iam::${SourceECSAWSAccountId}:root", !Ref "AWS::NoValue"]
            Action:
              - "sts:AssumeRole"

      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource: "*"
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - ecr:GetAuthorizationToken
                  - ecr:*
              - Resource: !Sub arn:aws:s3:::${ArtifactBucket}/*
                Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:GetObjectVersion
              - !If
                - IsEnvVariablesS3BucketEmpty
                - !Ref AWS::NoValue
                - Resource:
                    - !Sub arn:aws:s3:::${EnvVariablesS3BucketName}/*
                  Effect: Allow
                  Action:
                    - s3:PutObject
                    - s3:GetObject
                    - s3:GetObjectVersion
                    - s3:GetBucketVersioning


  CodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub cp-${TagName}-${DeployEnvironment}
      Path: /
      AssumeRolePolicyDocument: |
        {
            "Statement": [{
                "Effect": "Allow",
                "Principal": { "Service": [ "codepipeline.amazonaws.com" ]},
                "Action": [ "sts:AssumeRole" ]
            }]
        }
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource:
                  - !Sub arn:aws:s3:::${ArtifactBucket}/*
                Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketVersioning
              - !If
                - IsEnvVariablesS3BucketEmpty
                - !Ref AWS::NoValue
                - Resource:
                    - !Sub arn:aws:s3:::${EnvVariablesS3BucketName}/*
                  Effect: Allow
                  Action:
                    - s3:PutObject
                    - s3:GetObject
                    - s3:GetObjectVersion
                    - s3:GetBucketVersioning
              - Resource: "*"
                Effect: Allow
                Action:
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuilds
                  - cloudformation:*
                  - iam:PassRole
                  - lambda:*
                  - ec2:CreateSecurityGroup

  ArtifactBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain

  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Location: !Ref ArtifactBucket
        Type: "S3"
      Source:
        Location: !Sub ${ArtifactBucket}/source.zip
        Type: "GITHUB"
      Environment:
        ComputeType: "BUILD_GENERAL1_LARGE"
        Image: "aws/codebuild/docker:1.12.1"
        Type: "LINUX_CONTAINER"
        EnvironmentVariables:
          - Name: AWS_ACCOUNT_ID
            Value: !Ref AWS::AccountId
          - Name: AWS_REGION
            Value: !Ref AWS::Region
          - Name: ECR_NAME
            Value: !Ref ECSRespositoryName
          - Name: SOURCE_AWS_ACCOUNT_ID
            Value: !Ref SourceECSAWSAccountId
          - Name: SOURCE_AWS_REGION
            Value: !Ref SourceECSRegion
          - Name: GITHUB_TOKEN
            Value: !Ref GitHubToken
          - Name: DEPLOY_ENVIRONMENT
            Value: !Ref DeployEnvironment
          - Name: TAG_NAME
            Value: !Ref TagName
          - Name: GITHUB_REPO
            Value: !Ref GitHubRepo
          - Name: GITHUB_USER
            Value: !Ref GitHubUser
          - Name: BUILD_SCOPE
            Value: !FindInMap [EnviormentTag, !Ref DeployEnvironment, value]
          - Name: EMAIL
            Value: !Ref Email
          - Name: RELEASE_PLAN
            Value: !Ref ReleasePlan
          - Name: ENVIRONMENT_NAME
            Value:
              !Join ["-", [!Ref InfrastructureTagName, !FindInMap [EnviormentTag, !Ref DeployEnvironment, env]]]
          - Name: ENV_VARIABLES_S3_BUCKET
            Value: !Ref EnvVariablesS3BucketName
          - Name: ENV_VARIABLES_S3_KEY
            Value: !Ref EnvVariablesS3Key
      ServiceRole: !Ref CodeBuildServiceRole
  CodeBuildRelease:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Location: !Ref ArtifactBucket
        Type: "S3"
      Source:
        Location: !Sub ${ArtifactBucket}/source.zip
        Type: "GITHUB"
      Environment:
        ComputeType: "BUILD_GENERAL1_LARGE"
        Image: "aws/codebuild/ubuntu-base:14.04"
        Type: "LINUX_CONTAINER"
        EnvironmentVariables:
          - Name: GITHUB_TOKEN
            Value: !Ref GitHubToken
          - Name: GITHUB_REPO
            Value: !Ref GitHubRepo
          - Name: GITHUB_USER
            Value: !Ref GitHubUser
          - Name: DEPLOY_ENVIRONMENT
            Value: 'release'
          - Name: RELEASE_PLAN
            Value: !Ref ReleasePlan
          - Name: GITHUB_USERNAME
            Value: !Ref ReleaseManagerGitUsername
          - Name: GITHUB_EMAIL
            Value: !Ref ReleaseManagerGitEmail
      ServiceRole: !Ref CodeBuildServiceRole
  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RoleArn: !GetAtt CodePipelineServiceRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref ArtifactBucket
      Name: !Ref 'PipelineName'
      Stages:
        - Name: Source
          Actions:
            - Name: App
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Version: 1
                Provider: GitHub
              Configuration:
                Owner: !Ref GitHubUser
                Repo: !Ref GitHubRepo
                Branch: !Ref GitHubBranch
                OAuthToken: !Ref GitHubToken
              OutputArtifacts:
                - Name: App
              RunOrder: 1
        - Name: Build
          Actions:
            - !If
              - IsProductionCondition
              - Name: ManualApproval
                ActionTypeId:
                  Category: Approval
                  Owner: AWS
                  Version: 1
                  Provider: Manual
                RunOrder: 2
              - !Ref AWS::NoValue
            - Name: Build
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref CodeBuildProject
              InputArtifacts:
                - Name: App
              OutputArtifacts:
                - Name: BuildOutput
              RunOrder: 3
        - Name: Deploy
          Actions:
            - Name: Deploy
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: 1
                Provider: CloudFormation
              InputArtifacts:
                - Name: BuildOutput
              Configuration:
                ChangeSetName: Deploy
                ActionMode: CREATE_UPDATE
                Capabilities: CAPABILITY_NAMED_IAM
                RoleArn: !GetAtt [CloudFormationExecutionRole, Arn]
                StackName: !Join ["-", ["Ref":"AWS::StackName", !Ref ECSRespositoryName]]
                TemplatePath: BuildOutput::ecs/service.yaml
              RunOrder: 4
        - !If
          - IsStagingCondition
          - Name: Release
            Actions:
              - Name: Approve-Release
                ActionTypeId:
                  Category: Approval
                  Owner: AWS
                  Provider: Manual
                  Version: '1'
                Configuration:
                  CustomData: 'Are you ready to release to Production?'
                RunOrder: 4
              - Name: Release
                ActionTypeId:
                  Category: Build
                  Owner: AWS
                  Version: 1
                  Provider: CodeBuild
                Configuration:
                  ProjectName: !Ref CodeBuildRelease
                InputArtifacts:
                  - Name: BuildOutput
                OutputArtifacts:
                  - Name: Release
                RunOrder: 5
          - !Ref AWS::NoValue
  NotificationStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        Bucket: !Ref S3BucketName
        Channel: !Ref SlackChannel
        SlackWebHook: !Ref SlackWebHook
        DeployEnvironment: !Ref DeployEnvironment
        EnvironmentName: !Join ["-", [!Ref InfrastructureTagName, !FindInMap [EnviormentTag, !Ref DeployEnvironment, env]]]
      TemplateURL: !Sub https://s3.amazonaws.com/${S3BucketName}/notification.yaml

Outputs:
  PipelineUrl:
    Value: !Sub https://console.aws.amazon.com/codepipeline/home?region=${AWS::Region}#/view/${Pipeline}
